{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","state","pressedKey","keyUp","event","setState","key","document","addEventListener","this","removeEventListener","Component","ReactDOM","render","getElementById"],"mappings":"2MAMaA,EAAb,4MACEC,MAAyB,CACvBC,WAAY,IAFhB,EAaEC,MAAQ,SAACC,GACP,EAAKC,SAAS,CAAEH,WAAYE,EAAME,OAdtC,uDAKE,WACEC,SAASC,iBAAiB,QAASC,KAAKN,SAN5C,kCASE,WACEI,SAASG,oBAAoB,QAASD,KAAKN,SAV/C,oBAiBE,WACE,IAAQD,EAAeO,KAAKR,MAApBC,WAER,OACE,8BAEIA,EAAU,kCACqBA,GAC3B,gCAzBd,GAAyBS,a,MCDzBC,IAASC,OACP,cAAC,EAAD,IACAN,SAASO,eAAe,W","file":"static/js/main.3be2cc94.chunk.js","sourcesContent":["import { Component } from 'react';\n\ntype State = {\n  pressedKey: string,\n};\n\nexport class App extends Component {\n  state: Readonly<State> = {\n    pressedKey: '',\n  };\n\n  componentDidMount() {\n    document.addEventListener('keyup', this.keyUp);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keyup', this.keyUp);\n  }\n\n  keyUp = (event: KeyboardEvent) => {\n    this.setState({ pressedKey: event.key });\n  };\n\n  render(): React.ReactNode {\n    const { pressedKey } = this.state;\n\n    return (\n      <div>\n        {\n          pressedKey\n            ? `The last pressed key is ${pressedKey}`\n            : 'Nothing was pressed yet'\n        }\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nimport './index.scss';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}